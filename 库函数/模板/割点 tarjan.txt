/*
注意是否有多重边 

对于边的双连通，若边(u,v)，dfn[u]<low[v]（即不在环内），则为桥。对于点的双连通，若dfn[u]<=low[v]（小于是不在环内的点，等于是环与外界的唯一连接点），或者u为根且u有多个子树（说明u不在环内，因为没有横叉边）则为割点。

定理:当把边的双连通分支缩点后形成了一个有向无环图，叶子（度为1的点）的个数为n，则需要在原图中添加(n + 1)/2条边，可以使原图变为没有桥的双连通图。


边的双连通，可以求出桥，不经过桥dfs。
*/





#include<cstdio>
#include<cmath>
#include<stack>
#include<map>
#include<set>
#include<queue>
#include<deque>
#include<string>
#include<utility>
#include<sstream>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long lld;
const int N = 10100, M = 3010100, inf = 10110110;
int sv[N], dfn[N], low[N], cut[N];
int cnt, son, ans, root;
vector<int> g[N];

void dfs(int u, int dep){
    low[u] = dfn[u] = dep;  //访问时间
    for (int i = 0; i < g[u].size(); ++i) {
        int v = g[u][i];
        if(dfn[v] == -1){
            dfs(v, dep + 1);
            if(u == root) son++;
            else{
                low[u] = min(low[u], low[v]);
                if(low[v] >= dfn[u]) cut[u]++; //无法回溯到u的父亲节点， 注意无向图的两条有向边，所以有v -> u。须看清题目是否有多重边
            }
        }
        else low[u] = min(low[u], dfn[v]); //回边
    }
}
int tarjan(int n){
    memset(dfn, -1, sizeof(dfn));
    ans = 0;
    for(int i = 0; i < n; i ++)
    if(dfn[i] == -1){
        son = 0;
        root = i;
        ans++;
        dfs(root, 0);
        cut[root] = son - 1;
    }
    return 0;
}

int main(){
    int n, m;
    while(scanf("%d%d", &n, &m), n){
        memset(cut, 0 , sizeof(cut));
        for(int i = 0; i < n; ++i) g[i].clear();
        cnt = 0;
        if(m == 0){
            printf("%d\n", n - 1);
            continue;
        }
        int s, t;
        while(m--) scanf("%d%d", &s, &t), g[s].push_back(t), g[t].push_back(s);
        tarjan(n);
        int ad = 0;
        for(int i = 0; i< n; i++) ad = max(ad, cut[i]);
        printf("%d\n", ans + ad);
    }
}




多重边，桥
#include<cstdio>
#include<cmath>
#include<stack>
#include<map>
#include<set>
#include<queue>
#include<deque>
#include<string>
#include<utility>
#include<sstream>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long lld;
const int N = 10100, M = 2010100, inf = 10110110;
int sv[N], dfn[N], low[N], cut[M/2], pre[N];
int cnt, ans;

struct tim{
    int to, id, next;
}e[M];
void dfs(int u, int dep, int id){
   // cout << u << ' ' << dep << ' ' << id << endl;
    low[u] = dfn[u] = dep;  //访问时间
    for (int i = pre[u]; i != -1; i = e[i].next){
        int v = e[i].to;
        if(e[i].id == id) continue;
        if(dfn[v] == -1) dfs(v, dep + 1, e[i].id);
        low[u] = min(low[u], low[v]);
        if(low[v] > dfn[u] && cut[e[i].id] == 0) cut[e[i].id] = 1, ++ans;
    }
}
int tarjan(int n){
    memset(dfn, -1, sizeof(dfn));
    memset(cut, 0, sizeof(cut));
    ans = 0;
    dfs(1, 0, -1);
    return 0;
}

int addedge(int s, int t, int id){
    e[cnt].to = t, e[cnt].id = id, e[cnt].next = pre[s], pre[s] = cnt++;
    e[cnt].to = s, e[cnt].id = id, e[cnt].next = pre[t], pre[t] = cnt++;
}

int main(){
    int cas;
    cin >> cas;
    while(cas--){
        int n, m;
        scanf("%d%d", &n, &m);
        cnt = 0;
        memset(pre, -1, sizeof(pre));
        for(int i = 1; i <= m; ++i){
            int s, t;
            scanf("%d%d", &s, &t);
            addedge(s, t, i);
        }
        tarjan(n);

        printf("%d\n", ans);
        for(int i = 1; i <= m; ++i){
            if(cut[i]){
                printf("%d", i), --ans;
                if(ans) printf(" ");
                else printf("\n");
            }
        }
        if(cas) printf("\n");
    }
}




点的双连通


#include<cstdio>
#include<cmath>
#include<stack>
#include<map>
#include<set>
#include<queue>
#include<deque>
#include<string>
#include<utility>
#include<sstream>
#include<cstring>
#include<iostream>
#include<algorithm>
using namespace std;

typedef long long lld;
const int N = 1010, inf = 10110110;

struct Edge{
    int u, v;
};
int A[N][N];
int pre[N], iscut[N], bccno[N], dfs_clock, bcc_cnt;
int odd[N], color[N];
vector<int> bcc[N], G[N];
stack<Edge> S;
bool part(int u, int b){
    for(int i = 0; i < G[u].size(); ++i){
        int v = G[u][i];
        if(bccno[v] != b) continue;
        if(color[v] == color[u]) return false;
        if(!color[v]){
            color[v] = 3 - color[u];
            if(!part(v, b)) return false;
        }
    }
    return true;
}

int dfs(int u, int fa){
    int lowu = pre[u] = ++dfs_clock;
    int child = 0;
    for(int i = 0; i < G[u].size(); ++i){
        int v = G[u][i];
        Edge e = (Edge){u, v};
        if(!pre[v]){
            S.push(e);
            child++;
            int lowv = dfs(v, u);
            lowu = min(lowu, lowv);
            if(lowv >= pre[u]){
                iscut[u] = true;
                bcc_cnt++;
                bcc[bcc_cnt].clear();
                while(true){
                    Edge x = S.top();
                    S.pop();
                    if(bccno[x.u] != bcc_cnt){
                        bcc[bcc_cnt].push_back(x.u);
                        bccno[x.u] = bcc_cnt;
                    }
                    if(bccno[x.v] != bcc_cnt){
                        bcc[bcc_cnt].push_back(x.v);
                        bccno[x.v] = bcc_cnt;
                    }
                    if(x.u == u && x.v == v) break;
                }
            }
        }
        else if(pre[v] < pre[u] && v != fa){
                S.push(e);
                lowu = min(lowu, pre[v]);
            }
    }
    if(fa < 0 && child == 1) iscut[u] = 0;
    return lowu;
}

void find_bcc(int n){
    memset(pre, 0, sizeof(pre));
    memset(iscut, 0, sizeof(iscut));
    memset(bccno, 0, sizeof(bccno));
    dfs_clock = bcc_cnt = 0;
    for(int i = 0; i < n; ++i)
    if(!pre[i]) dfs(i, -1);
}


int main(){
    int n, m;
    while(scanf("%d%d", &n, &m), n){
        for(int i = 0; i < n; ++i) G[i].clear();
        memset(A, 0, sizeof(A));
        for(int i = 0; i < m; ++i){
            int u, v;
            scanf("%d%d", &u, &v);
            --u, --v;
            A[u][v] = A[v][u] = 1;
        }
        for(int u = 0; u < n; ++u)
        for(int v = u + 1; v < n; ++v)
        if(!A[u][v]) G[u].push_back(v), G[v].push_back(u);
        find_bcc(n);
        memset(odd, 0, sizeof(odd));
        for(int i = 1; i <= bcc_cnt; ++i){
            memset(color, 0, sizeof(color));
            for(int j = 0; j < bcc[i].size(); ++j) bccno[bcc[i][j]] = i;
            int u = bcc[i][0];
            color[u] = 1;
            if(!part(u, i))
            for(int j = 0; j < bcc[i].size(); ++j) odd[bcc[i][j]] = 1;
        }
        int ans = n;
        for(int i = 0; i < n; ++i) if(odd[i]) --ans;
        printf("%d\n", ans);
    }
}
